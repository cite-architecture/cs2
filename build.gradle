/*
Root build file defines plugin usage and dependencies for all subprojects,
and two server farms for integration testing, one running just fuseki
with a test data set loaded, the other running both fuseki and the
current build of citeservlet.
 */

import org.apache.tools.ant.filters.*
task configure {
  description = "Generates fuseki configuration file based on current project location."
  inputs.file "${rootProject.projectDir}/fuseki/config-template.ttl"
  outputs.file "${rootProject.projectDir}/fuseki/fusekibase/config.ttl"
  doLast {
    copy {
      from (file("${rootProject.projectDir}/fuseki")) {
        include 'config-template.ttl'
        rename 'config-template.ttl', 'config.ttl'
      }
      filter(ReplaceTokens, tokens : ["projectroot" : "${rootProject.rootDir}".toString() ] )
      into "${rootProject.projectDir}/fuseki/fusekibase"
    }
  }
}

allprojects {
  apply from: "${rootProject.rootDir}/versions.gradle"
  version = "0.10.0"
  
  task vmap << { task ->
    println "\nDependencies for ${version} in ${task.project.name}:"
    versionMap.keySet().sort().each { k ->
      print k
      Integer spaces = 15 - k.size()
      Integer idx = 0
      while(idx < spaces) {
	print " "
	idx++;
      }
      println versionMap[k]
    }
    println ""
  }
  vmap.description = "Displays versions of all dependencies"

  task seesrc << { task ->
    println "\nFiles on runtime CP for ${version} in ${task.project.name}:"
    task.project.runtimeClasspath.getFiles().each {
      println it
    }

    println "\n"
    println "\nSource sets files:"
    task.project.sourceSets.each { ss ->
      println "Source set ${ss} has " + ss.allSource.getSrcDirs() 
    }


    println "\nconfigurations:"
    task.project.configurations.each { c ->
      println "${c} has ..."
    }
  }
  seesrc.description = "See info about some settings for project."
}

subprojects {
  apply plugin: "groovy"
  apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'
  
  configurations.compile.transitive = true
  
  repositories {
    mavenCentral()
    maven {
      url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
  }
  dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: versionMap['groovy']
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: versionMap['groovy']

    testCompile "org.concordion:concordion:${versionMap['concordion']}"
    testCompile "junit:junit:${versionMap['junit']}"

    compile group: 'edu.harvard.chs', name: 'cite', version: versionMap['cite']
    compile group: 'commons-io', name: 'commons-io', version: versionMap['commonsio']

    testCompile group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'

  }

  task initProject(description: 'Initializes project directories') << { task ->
    task.project.sourceSets*.groovy.srcDirs*.each { 
      println "Create directory $it"
      it.mkdirs() 
    }
  }

  task testCompPath () << { task ->

    println "\nFirst, all configs in ${version} in ${task.project.name}:"
    configurations.each {
      println it
    }
    println "\nFiles on test compile CP for ${version} in ${task.project.name}:"
    configurations.testCompile.each {
      println "testCompile: $it"
    }
  }
}


project(":specs") {
  apply plugin: "java"
  dependencies {
    compile project(":sparqlcts")
    testCompile project(":sparqlcts")
  }
}

project(":webapp") {
  apply plugin: "war"

  repositories {
    mavenCentral()
    maven {
      url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
  }

}



project(":sparqlcts") {
  // make integration tests a separate source set:
  sourceSets {
    integr {
    }
  }

  dependencies {
    compile project(":common")
    testCompile project(":common")

    // Need to define all dependencies for integration tests:
    integrCompile "junit:junit:${versionMap['junit']}"
    integrCompile project(":sparqlcts")
    integrCompile  group: 'org.codehaus.groovy', name: 'groovy-all', version: versionMap['groovy']
  }
}



project(":orca") {
  // make integration tests a separate source set:
  sourceSets {
    integr {
    }
  }

  dependencies {
    compile project(":common")
    testCompile project(":common")

    // Need to define all dependencies for integration tests:
    integrCompile "junit:junit:${versionMap['junit']}"
    integrCompile project(":sparqlcts")
    integrCompile  group: 'org.codehaus.groovy', name: 'groovy-all', version: versionMap['groovy']
  }
}
