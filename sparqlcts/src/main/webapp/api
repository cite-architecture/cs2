package edu.holycross.shot.sparqlcts
import edu.holycross.shot.sparqlcts.CtsGraph
import edu.holycross.shot.sparqlcts.CtsDefinitions
import edu.holycross.shot.citeservlet.Sparql
import edu.harvard.chs.cite.CtsUrn

String contentType 

String responseType = request.getParameter("type")
if ( (responseType == "") || (responseType == null)){
	responseType = "xml"
}

if (responseType == "json"){
	contentType = "text/json"
} else {
	contentType = "text/xml"
}
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")

String stylesheet = null
if (request.getParameter("stylesheet")){
	stylesheet = request.getParameter("stylesheet")
}

boolean done = false


String req = request.getParameter("request")
String urnStr = request.getParameter("urn")
if (req == "GetCapabilities") {
	if (stylesheet != null){
		println """<?xml-stylesheet type="text/xsl" href="cts-ui/xslt/${stylesheet}.xsl"?>\r"""
	}
	  println getCapsReply()
	  done = true



} else  if (req == "GetVersion") {
	println "<version>@version@</version>"
		done = true

} else {
	// guarantee that URN parameter is syntactically valid
    if (request.getParameter("urn"))	{
		try {
			CtsUrn urn = new CtsUrn(urnStr)

		} catch (Exception e) {
			System.err.println e
			println """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
				def errorNum
				switch (e) {
					case ~/java.lang.Exception: Bad URN syntax.*/:
					   errorNum = 2
					   println """<message>BAD URN SYNTAX: "${urnStr}"</message>\n"""
					   println """<code>${errorNum}</code>\n"""
					   break

					case "java.lang.NullPointerException":
						errorNum = 1
					   println """<message>INVALID REQUEST. Missing parameter: 'urn'</message>\n"""
					   println """<code>${errorNum}</code>\n"""
					   break

					default:
					   errorNum = 0
					   println """<message>Undefined error: ${e}</message>"""
					   println """<code>${errorNum}</code>"""
					   break
				}
			println """</CTSError>\n"""
				done = true
		}
	} else {
		   errorNum = 1
			println """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
		   println """<message>INVALID REQUEST. Missing parameter: 'urn'</message>\n"""
		   println """<code>${errorNum}</code>\n"""
			println """</CTSError>\n"""
		   done = true
	}
}

Integer context = 0
if (request.getParameter("context")) {
	String contextStr = request.getParameter("context")
		try {
			context = contextStr.toInteger()
			try {
				assert context >= 0
				} catch (AssertionError e){
					println badIntegerParamReply("context",contextStr)
					done = true
				}
		} catch (Exception e) {
			println badIntegerParamReply("context",contextStr)
			done = true
		}
}

Integer level = null
if (request.getParameter("level")) {
	String levelStr = request.getParameter("level")
		try {
			level = levelStr.toInteger()
			try {
				assert level >= 0
			} catch (AssertionError e){
				println badIntegerParamReply("level",levelStr)
				done = true
			}
		} catch (Exception e) {
			println badIntegerParamReply("level",levelStr)
			done = true
		}
}


if (!done) {
	String baseUrl = "http://localhost:8080/fuseki/ctsTest/query"
		Sparql sparql = new Sparql(baseUrl)
		CtsGraph graph = new CtsGraph(sparql)
		CtsReply reply = new CtsReply( sparql, graph)
		switch(req) {

			case "GetDescription":
					if (responseType == "json"){
						try {
						println reply.getDescriptionToJSON(urnStr)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}

					} else {
						try {
							println reply.getDescriptionToXML(urnStr)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					}
					break

			case "GetPassagePlus":
					if (responseType == "json"){
						try {
							println reply.getPassagePlusToJSON(urnStr,context)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					} else {
						try {
							if (stylesheet != null){
								println """<?xml-stylesheet type="text/xsl" href="cts-ui/xslt/${stylesheet}.xsl"?>\r"""
							}
							println reply.getPassagePlusToXML(urnStr,context)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					}
					break

			case "GetPassage":
					if (responseType == "json"){
						try {
						println reply.getPassageToJSON(urnStr,context)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					} else {
						try {
							if (stylesheet != null){
								println """<?xml-stylesheet type="text/xsl" href="cts-ui/xslt/${stylesheet}.xsl"?>\r"""
							}
							println reply.getPassageToXML(urnStr,context)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					}
					break

			case "GetPrevNextUrn":
					if (responseType == "json"){
						try {
						println reply.getPrevNextToJSON(urnStr)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					} else {
						try {
						println reply.getPrevNextToXML(urnStr)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					}
					break

			case "GetValidReff":
					if (responseType == "json"){
						try {
						println reply.getValidReffToJSON(urnStr,level)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					} else {
						try {
							if (stylesheet != null){
								println """<?xml-stylesheet type="text/xsl" href="cts-ui/xslt/${stylesheet}.xsl"?>\r"""
							}
							println reply.getValidReffToXML(urnStr,level)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					}
					break

			case "GetFirstUrn":
					if (responseType == "json"){
						try {
						println reply.getFirstUrnToJSON(urnStr)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					} else {
						try {
							if (stylesheet != null){
								println """<?xml-stylesheet type="text/xsl" href="cts-ui/xslt/${stylesheet}.xsl"?>\r"""
							}
						println reply.getFirstUrnToXML(urnStr)
						} catch (Exception e){
							println invalidUrnReply(urnStr)
						}
					}
					break
			default :
					// break with "undefined request" excetpion
					println unknownRequestReply()
					break
		}
}

String invalidUrnReply(urnStr){
		Integer	errorNum = 3
		String errorString =  """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
		errorString += """<message>INVALID REQUEST. No text found matching: "${urnStr}"</message>\n"""
		errorString += """<code>${errorNum}</code>\n"""
		errorString += """</CTSError>\n"""
		return errorString
}

String unknownRequestReply(){
		Integer	errorNum = 4
		String errorString =  """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
		errorString += """<message>UNKNOWN REQUEST. Must be one of: "GetCapabilities", "GetValidReff", "GetPassage", "GetPassagePlus", "GetPrevNextUrn", "GetFirstUrn", "GetDescription".</message>\n"""
		errorString += """<code>${errorNum}</code>\n"""
		errorString += """</CTSError>\n"""
		return errorString
}

String badIntegerParamReply(String paramName, String paramValue){
			Integer errorNum = 1
			errorString =  """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
		    errorString += """<message>INVALID REQUEST. Value of parameter "${paramName}" must be a positive integer: "${paramValue}."</message>\n"""
		    errorString +=  """<code>${errorNum}</code>\n"""
			errorString +=  """</CTSError>\n"""
			return errorString
}

String getCapsReply() {
    String inv = "inventory.xml"
    if (request.getParameter("inv")) {
        inv = request.getParameter("inv")
    }

    try  {
        File invFile = new File("${request.getRealPath('/')}/invs/${inv}")
        // temporary kludge:  strip XML PIs, and hope they're isolated on
        // a single line ...
        String capsText = invFile.getText("UTF-8").replaceAll(/<[?].+[?]>/, '')
        return "<GetCapabilities xmlns='http://chs.harvard.edu/xmlns/cts' xmlns:cts='http://chs.harvard.edu/xmlns/cts'>\n<cts:request><request>GetCapabilities</request>\n<inventory>${inv}</inventory>\n\n</cts:request>\n<cts:reply>\n${capsText}\n</cts:reply>\n</GetCapabilities>"

	//return "<debug>FILE ${invFile} had text of length ${capsText.size()}</debug>"

    } catch (Exception e) {
        return ("<error>Exception reading inventory file:  ${e}</error>")
    }

}

