package edu.holycross.shot.sparqlcts
import edu.holycross.shot.sparqlcts.CtsGraph
import edu.holycross.shot.sparqlcts.CtsDefinitions
import edu.holycross.shot.citeservlet.Sparql
import edu.harvard.chs.cite.CtsUrn

String contentType 

String responseType = request.getParameter("type")
if ( (responseType == "") || (responseType == null)){
	responseType = "xml"
}

if (responseType == "json"){
	contentType = "text/json"
} else {
	contentType = "text/xml"
}
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")


boolean done = false


String req = request.getParameter("request")
String urnStr = request.getParameter("urn")
if (req == "GetCapabilities") {
	  println getCapsReply()
	  done = true



} else  if (req == "GetVersion") {
	println "<version>@version@</version>"
		done = true

} else {
	// guarantee that URN parameter is syntactically valid
	try {
		CtsUrn urn = new CtsUrn(urnStr)
	} catch (Exception e) {
		println """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
			def errorNum
			switch (e) {
				case 'java.lang.Exception: Bad URN syntax: #BADSYNTAX#':
				   errorNum = 2
				   println """<message>BAD URN SYNTAX: ${urnStr}</message>\n"""
				   println """<code>${errorNum}</code>\n"""
				   break

				case 'java.lang.Exception: Bad URN syntax: ##':
				   errorNum = 1
				   println """<message>INVALID REQUEST. Missing required parameter: 'urn'</message>\n"""
				   println """<code>${errorNum}</code>\n"""
				   break

				default:
			   	   errorNum = 0
				   break
			}
		println """</CTSError>\n"""
			done = true
	}
}

Integer context = 0
if (request.getParameter("context")) {
	String contextStr = request.getParameter("context")
		try {
			context = contextStr.toInteger()
		} catch (Exception e) {
			System.err.println "Value of context parameter must be an integer: ${contextStr}. And by the way, this implementation will ignore the context parameter."
		}
}

Integer level = null
if (request.getParameter("level")) {
	String levelStr = request.getParameter("level")
		try {
			level = levelStr.toInteger()
		} catch (Exception e) {
			System.err.println "Value of level parameter must be an integer: ${levelStr}."
		}
}

if (!done) {
	String baseUrl = "http://localhost:8080/fuseki/ds/query"
		Sparql sparql = new Sparql(baseUrl)
		CtsGraph graph = new CtsGraph(sparql)
		CtsReply reply = new CtsReply( sparql, graph)
		switch(req) {

			case "GetDescription":
					println "<CTSError>Get Description ${urnStr}; type ${responseType}</CTSError>"
					break

			case "GetPassagePlus":
					if (responseType == "json"){
						println reply.getPassagePlusToJSON(urnStr)
					} else {
						println reply.getPassagePlusToXML(urnStr)
					}
					break

			case "GetPassage":
					println "<CTSError>GetPassage ${urnStr}; type ${responseType}</CTSError>"
					break

			case "GetPrevNextUrn":
					if (responseType == "json"){
						println reply.getPrevNextToJSON(urnStr)
					} else {
						println reply.getPrevNextToXML(urnStr)
					}
					break

			case "GetValidReff":
					if (responseType == "json"){
						println reply.getValidReffToJSON(urnStr,level)
					} else {
						println reply.getValidReffToXML(urnStr,level)
					}
					break
					break

			default :
					// break with "undefined request" excetpion
					println "<error>Unrecognized request: ${req}.  \n(Add properly name-spaced reply here.)</error>"
					break
		}
}

String getCapsReply() {
    String inv = "inventory.xml"
    if (request.getParameter("inv")) {
        inv = request.getParameter("inv")
    }

    try  {
        File invFile = new File("${request.getRealPath('/')}/invs/${inv}")
        // temporary kludge:  strip XML PIs, and hope they're isolated on
        // a single line ...
        String capsText = invFile.getText("UTF-8").replaceAll(/<[?].+[?]>/, '')
        return "<GetCapabilities xmlns='http://chs.harvard.edu/xmlns/cts' xmlns:cts='http://chs.harvard.edu/xmlns/cts'>\n<cts:request><request>GetCapabilities</request>\n<inventory>${inv}</inventory>\n\n</cts:request>\n<cts:reply>\n${capsText}\n</cts:reply>\n</GetCapabilities>"

	//return "<debug>FILE ${invFile} had text of length ${capsText.size()}</debug>"

    } catch (Exception e) {
        return ("<error>Exception reading inventory file:  ${e}</error>")
    }

}

