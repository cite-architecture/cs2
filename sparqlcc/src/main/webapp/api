import edu.holycross.shot.sparqlcc.*
import edu.harvard.chs.cite.CtsUrn
import edu.harvard.chs.cite.CiteUrn


/* SET UP VARIABLES */

String contentType

String responseType = request.getParameter("type")
if ( (responseType == "") || (responseType == null)){
	responseType = "xml"
}

if (responseType == "json"){
	contentType = "text/json"
	} else {
		contentType = "text/xml"
	}
	response.setContentType(contentType)
	response.setHeader( "Access-Control-Allow-Origin", "*")


	String stylesheet = null
	if (request.getParameter("stylesheet")){
		stylesheet = request.getParameter("stylesheet")
	}

	boolean done = false

	String req = request.getParameter("request")
	String urnStr = request.getParameter("urn")

	if (req == "GetCapabilities") {
		if (stylesheet != null){
			println """<?xml-stylesheet type="text/xsl" href="cite-ui/xslt/${stylesheet}.xsl"?>\r"""
		}
		// *** GetCapabilities ***
		println getCapsReply()
		done = true
	} else  if (req == "GetVersion") {
		println "<version>@version@</version>"
		done = true
	} else {
		// guarantee that URN parameter is syntactically valid
		if (request.getParameter("urn"))	{
			try {
				CiteUrn urn = new CiteUrn(urnStr)
				} catch (Exception e) {
					System.err.printn(e)
					println "<error>${urnStr} is not a valid URN: ${e}</error>\n"
					done = true
				}
			} else {
				errorNum = 1
				println """<CITEError xmlns:cts="http:chs.harvard.edu/xmlns/cite" xmlns="http://chs.harvard.edu/xmlns/cite">\n"""
				println """<message>INVALID REQUEST. Missing parameter: 'urn'</message>\n"""
				println """<code>${errorNum}</code>\n"""
				println """</CITEError>\n"""
				done = true
			}
	}


// *** Other Requests than GetCapabilities and GetVersion
if (!done) {

	String baseUrl = context.getInitParameter('tripleserver')
  Sparql sparql = new Sparql(baseUrl)
  CcGraph cc = new CcGraph(sparql)

  if (responseType == "xml"){
		if (stylesheet != null){
			println """<?xml-stylesheet type="text/xsl" href="cite-ui/xslt/${stylesheet}.xsl"?>\r"""
		}
		CiteUrn urn = new CiteUrn(urnStr)
		println cc.formatXmlReply(req, urn, request.getParameterMap())
	} else {
		println "<html><p>Responses other than XML not yet implemented.</p></html>"
	}


}

String getCapsReply() {
    String inv = "inventory.xml"
    if (request.getParameter("inv")) {
        inv = request.getParameter("inv")
    }

    try  {
        File invFile = new File("${request.getRealPath('/')}/invs/${inv}")
        // temporary kludge:  strip XML PIs, and hope they're isolated on
        // a single line ...
        String capsText = invFile.getText("UTF-8").replaceAll(/<[?].+[?]>/, '')
        return "<GetCapabilities xmlns='http://chs.harvard.edu/xmlns/cite' xmlns:cite='http://chs.harvard.edu/xmlns/cite'>\n<cite:request><request>GetCapabilities</request>\n<inventory>${inv}</inventory>\n\n</cite:request>\n<cite:reply>\n${capsText}\n</cite:reply>\n</GetCapabilities>"

	//return "<debug>FILE ${invFile} had text of length ${capsText.size()}</debug>"

    } catch (Exception e) {
        return ("<error>Exception reading inventory file:  ${e}</error>")
    }
}
